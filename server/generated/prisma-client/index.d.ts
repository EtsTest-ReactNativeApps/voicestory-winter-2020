// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  speaker: (where?: SpeakerWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  speaker: (where: SpeakerWhereUniqueInput) => SpeakerNullablePromise;
  speakers: (args?: {
    where?: SpeakerWhereInput;
    orderBy?: SpeakerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Speaker>;
  speakersConnection: (args?: {
    where?: SpeakerWhereInput;
    orderBy?: SpeakerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SpeakerConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoNullablePromise;
  videos: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Video>;
  videosConnection: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createSpeaker: (data: SpeakerCreateInput) => SpeakerPromise;
  updateSpeaker: (args: {
    data: SpeakerUpdateInput;
    where: SpeakerWhereUniqueInput;
  }) => SpeakerPromise;
  updateManySpeakers: (args: {
    data: SpeakerUpdateManyMutationInput;
    where?: SpeakerWhereInput;
  }) => BatchPayloadPromise;
  upsertSpeaker: (args: {
    where: SpeakerWhereUniqueInput;
    create: SpeakerCreateInput;
    update: SpeakerUpdateInput;
  }) => SpeakerPromise;
  deleteSpeaker: (where: SpeakerWhereUniqueInput) => SpeakerPromise;
  deleteManySpeakers: (where?: SpeakerWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (args: {
    data: VideoUpdateInput;
    where: VideoWhereUniqueInput;
  }) => VideoPromise;
  updateManyVideos: (args: {
    data: VideoUpdateManyMutationInput;
    where?: VideoWhereInput;
  }) => BatchPayloadPromise;
  upsertVideo: (args: {
    where: VideoWhereUniqueInput;
    create: VideoCreateInput;
    update: VideoUpdateInput;
  }) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  speaker: (
    where?: SpeakerSubscriptionWhereInput
  ) => SpeakerSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SpeakerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "profile_picture_ASC"
  | "profile_picture_DESC"
  | "description_ASC"
  | "description_DESC"
  | "QAs_ASC"
  | "QAs_DESC";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "published_ASC"
  | "published_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "thumbnail_url_ASC"
  | "thumbnail_url_DESC"
  | "location_name_ASC"
  | "location_name_DESC"
  | "location_address_ASC"
  | "location_address_DESC"
  | "location_coordinates_ASC"
  | "location_coordinates_DESC"
  | "price_ASC"
  | "price_DESC";

export type longLat = "LONGITUDE" | "LATITUDE";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutIsSpeakerInput {
  create?: Maybe<UserCreateWithoutIsSpeakerInput>;
  update?: Maybe<UserUpdateWithoutIsSpeakerDataInput>;
  upsert?: Maybe<UserUpsertWithoutIsSpeakerInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SpeakerUpdatesocial_mediasInput {
  set?: Maybe<String[] | String>;
}

export interface VideoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  author?: Maybe<SpeakerWhereInput>;
  AND?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  OR?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  NOT?: Maybe<VideoWhereInput[] | VideoWhereInput>;
}

export interface SpeakerCreateInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutIsSpeakerInput>;
  profile_picture: String;
  titles?: Maybe<SpeakerCreatetitlesInput>;
  social_medias?: Maybe<SpeakerCreatesocial_mediasInput>;
  description: String;
  videos?: Maybe<VideoCreateManyWithoutAuthorInput>;
  QAs?: Maybe<String>;
}

export interface SpeakerUpdateInput {
  owner?: Maybe<UserUpdateOneWithoutIsSpeakerInput>;
  profile_picture?: Maybe<String>;
  titles?: Maybe<SpeakerUpdatetitlesInput>;
  social_medias?: Maybe<SpeakerUpdatesocial_mediasInput>;
  description?: Maybe<String>;
  videos?: Maybe<VideoUpdateManyWithoutAuthorInput>;
  QAs?: Maybe<String>;
}

export interface UserCreateOneWithoutIsSpeakerInput {
  create?: Maybe<UserCreateWithoutIsSpeakerInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface VideoUpdateManyWithoutAuthorInput {
  create?: Maybe<
    VideoCreateWithoutAuthorInput[] | VideoCreateWithoutAuthorInput
  >;
  delete?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  set?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  disconnect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  update?: Maybe<
    | VideoUpdateWithWhereUniqueWithoutAuthorInput[]
    | VideoUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | VideoUpsertWithWhereUniqueWithoutAuthorInput[]
    | VideoUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  updateMany?: Maybe<
    VideoUpdateManyWithWhereNestedInput[] | VideoUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateWithoutIsSpeakerInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface SpeakerCreatetitlesInput {
  set?: Maybe<String[] | String>;
}

export interface SpeakerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  profile_picture?: Maybe<String>;
  profile_picture_not?: Maybe<String>;
  profile_picture_in?: Maybe<String[] | String>;
  profile_picture_not_in?: Maybe<String[] | String>;
  profile_picture_lt?: Maybe<String>;
  profile_picture_lte?: Maybe<String>;
  profile_picture_gt?: Maybe<String>;
  profile_picture_gte?: Maybe<String>;
  profile_picture_contains?: Maybe<String>;
  profile_picture_not_contains?: Maybe<String>;
  profile_picture_starts_with?: Maybe<String>;
  profile_picture_not_starts_with?: Maybe<String>;
  profile_picture_ends_with?: Maybe<String>;
  profile_picture_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  videos_every?: Maybe<VideoWhereInput>;
  videos_some?: Maybe<VideoWhereInput>;
  videos_none?: Maybe<VideoWhereInput>;
  QAs?: Maybe<String>;
  QAs_not?: Maybe<String>;
  QAs_in?: Maybe<String[] | String>;
  QAs_not_in?: Maybe<String[] | String>;
  QAs_lt?: Maybe<String>;
  QAs_lte?: Maybe<String>;
  QAs_gt?: Maybe<String>;
  QAs_gte?: Maybe<String>;
  QAs_contains?: Maybe<String>;
  QAs_not_contains?: Maybe<String>;
  QAs_starts_with?: Maybe<String>;
  QAs_not_starts_with?: Maybe<String>;
  QAs_ends_with?: Maybe<String>;
  QAs_not_ends_with?: Maybe<String>;
  AND?: Maybe<SpeakerWhereInput[] | SpeakerWhereInput>;
  OR?: Maybe<SpeakerWhereInput[] | SpeakerWhereInput>;
  NOT?: Maybe<SpeakerWhereInput[] | SpeakerWhereInput>;
}

export interface SpeakerCreatesocial_mediasInput {
  set?: Maybe<String[] | String>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  thumbnail_url?: Maybe<String>;
  thumbnail_url_not?: Maybe<String>;
  thumbnail_url_in?: Maybe<String[] | String>;
  thumbnail_url_not_in?: Maybe<String[] | String>;
  thumbnail_url_lt?: Maybe<String>;
  thumbnail_url_lte?: Maybe<String>;
  thumbnail_url_gt?: Maybe<String>;
  thumbnail_url_gte?: Maybe<String>;
  thumbnail_url_contains?: Maybe<String>;
  thumbnail_url_not_contains?: Maybe<String>;
  thumbnail_url_starts_with?: Maybe<String>;
  thumbnail_url_not_starts_with?: Maybe<String>;
  thumbnail_url_ends_with?: Maybe<String>;
  thumbnail_url_not_ends_with?: Maybe<String>;
  location_name?: Maybe<String>;
  location_name_not?: Maybe<String>;
  location_name_in?: Maybe<String[] | String>;
  location_name_not_in?: Maybe<String[] | String>;
  location_name_lt?: Maybe<String>;
  location_name_lte?: Maybe<String>;
  location_name_gt?: Maybe<String>;
  location_name_gte?: Maybe<String>;
  location_name_contains?: Maybe<String>;
  location_name_not_contains?: Maybe<String>;
  location_name_starts_with?: Maybe<String>;
  location_name_not_starts_with?: Maybe<String>;
  location_name_ends_with?: Maybe<String>;
  location_name_not_ends_with?: Maybe<String>;
  location_address?: Maybe<String>;
  location_address_not?: Maybe<String>;
  location_address_in?: Maybe<String[] | String>;
  location_address_not_in?: Maybe<String[] | String>;
  location_address_lt?: Maybe<String>;
  location_address_lte?: Maybe<String>;
  location_address_gt?: Maybe<String>;
  location_address_gte?: Maybe<String>;
  location_address_contains?: Maybe<String>;
  location_address_not_contains?: Maybe<String>;
  location_address_starts_with?: Maybe<String>;
  location_address_not_starts_with?: Maybe<String>;
  location_address_ends_with?: Maybe<String>;
  location_address_not_ends_with?: Maybe<String>;
  location_coordinates?: Maybe<longLat>;
  location_coordinates_not?: Maybe<longLat>;
  location_coordinates_in?: Maybe<longLat[] | longLat>;
  location_coordinates_not_in?: Maybe<longLat[] | longLat>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  speakers_every?: Maybe<SpeakerWhereInput>;
  speakers_some?: Maybe<SpeakerWhereInput>;
  speakers_none?: Maybe<SpeakerWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface VideoCreateManyWithoutAuthorInput {
  create?: Maybe<
    VideoCreateWithoutAuthorInput[] | VideoCreateWithoutAuthorInput
  >;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
}

export interface SpeakerUpsertWithoutVideosInput {
  update: SpeakerUpdateWithoutVideosDataInput;
  create: SpeakerCreateWithoutVideosInput;
}

export interface VideoCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  url: String;
  published?: Maybe<Boolean>;
}

export interface SpeakerUpdateOneWithoutVideosInput {
  create?: Maybe<SpeakerCreateWithoutVideosInput>;
  update?: Maybe<SpeakerUpdateWithoutVideosDataInput>;
  upsert?: Maybe<SpeakerUpsertWithoutVideosInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SpeakerWhereUniqueInput>;
}

export interface EventUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  thumbnail_url?: Maybe<String>;
  location_name?: Maybe<String>;
  location_address?: Maybe<String>;
  location_coordinates?: Maybe<longLat>;
  price?: Maybe<Float>;
  speakers?: Maybe<SpeakerUpdateManyInput>;
}

export type SpeakerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SpeakerUpdateManyInput {
  create?: Maybe<SpeakerCreateInput[] | SpeakerCreateInput>;
  update?: Maybe<
    | SpeakerUpdateWithWhereUniqueNestedInput[]
    | SpeakerUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | SpeakerUpsertWithWhereUniqueNestedInput[]
    | SpeakerUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput>;
  connect?: Maybe<SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput>;
  set?: Maybe<SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput>;
  disconnect?: Maybe<SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput>;
  deleteMany?: Maybe<SpeakerScalarWhereInput[] | SpeakerScalarWhereInput>;
  updateMany?: Maybe<
    | SpeakerUpdateManyWithWhereNestedInput[]
    | SpeakerUpdateManyWithWhereNestedInput
  >;
}

export interface SpeakerCreateOneWithoutVideosInput {
  create?: Maybe<SpeakerCreateWithoutVideosInput>;
  connect?: Maybe<SpeakerWhereUniqueInput>;
}

export interface SpeakerUpdateWithWhereUniqueNestedInput {
  where: SpeakerWhereUniqueInput;
  data: SpeakerUpdateDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface SpeakerUpdateDataInput {
  owner?: Maybe<UserUpdateOneWithoutIsSpeakerInput>;
  profile_picture?: Maybe<String>;
  titles?: Maybe<SpeakerUpdatetitlesInput>;
  social_medias?: Maybe<SpeakerUpdatesocial_mediasInput>;
  description?: Maybe<String>;
  videos?: Maybe<VideoUpdateManyWithoutAuthorInput>;
  QAs?: Maybe<String>;
}

export interface SpeakerUpsertWithoutOwnerInput {
  update: SpeakerUpdateWithoutOwnerDataInput;
  create: SpeakerCreateWithoutOwnerInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  name: String;
  isSpeaker?: Maybe<SpeakerCreateOneWithoutOwnerInput>;
}

export interface SpeakerUpdateOneWithoutOwnerInput {
  create?: Maybe<SpeakerCreateWithoutOwnerInput>;
  update?: Maybe<SpeakerUpdateWithoutOwnerDataInput>;
  upsert?: Maybe<SpeakerUpsertWithoutOwnerInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SpeakerWhereUniqueInput>;
}

export interface UserUpdateWithoutIsSpeakerDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  isSpeaker?: Maybe<SpeakerUpdateOneWithoutOwnerInput>;
}

export interface UserUpsertWithoutIsSpeakerInput {
  update: UserUpdateWithoutIsSpeakerDataInput;
  create: UserCreateWithoutIsSpeakerInput;
}

export interface SpeakerCreateOneWithoutOwnerInput {
  create?: Maybe<SpeakerCreateWithoutOwnerInput>;
  connect?: Maybe<SpeakerWhereUniqueInput>;
}

export interface SpeakerUpdatetitlesInput {
  set?: Maybe<String[] | String>;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  thumbnail_url: String;
  location_name: String;
  location_address: String;
  location_coordinates: longLat;
  price?: Maybe<Float>;
  speakers?: Maybe<SpeakerCreateManyInput>;
}

export interface SpeakerUpdateManyMutationInput {
  profile_picture?: Maybe<String>;
  titles?: Maybe<SpeakerUpdatetitlesInput>;
  social_medias?: Maybe<SpeakerUpdatesocial_mediasInput>;
  description?: Maybe<String>;
  QAs?: Maybe<String>;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VideoWhereInput>;
  AND?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  OR?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  NOT?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isSpeaker?: Maybe<SpeakerWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface VideoUpdateWithWhereUniqueWithoutAuthorInput {
  where: VideoWhereUniqueInput;
  data: VideoUpdateWithoutAuthorDataInput;
}

export interface SpeakerUpdateWithoutVideosDataInput {
  owner?: Maybe<UserUpdateOneWithoutIsSpeakerInput>;
  profile_picture?: Maybe<String>;
  titles?: Maybe<SpeakerUpdatetitlesInput>;
  social_medias?: Maybe<SpeakerUpdatesocial_mediasInput>;
  description?: Maybe<String>;
  QAs?: Maybe<String>;
}

export interface VideoUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface SpeakerCreateWithoutVideosInput {
  id?: Maybe<ID_Input>;
  owner?: Maybe<UserCreateOneWithoutIsSpeakerInput>;
  profile_picture: String;
  titles?: Maybe<SpeakerCreatetitlesInput>;
  social_medias?: Maybe<SpeakerCreatesocial_mediasInput>;
  description: String;
  QAs?: Maybe<String>;
}

export interface VideoUpsertWithWhereUniqueWithoutAuthorInput {
  where: VideoWhereUniqueInput;
  update: VideoUpdateWithoutAuthorDataInput;
  create: VideoCreateWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface VideoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  OR?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  NOT?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
}

export type VideoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput;
  data: VideoUpdateManyDataInput;
}

export interface SpeakerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SpeakerWhereInput>;
  AND?: Maybe<SpeakerSubscriptionWhereInput[] | SpeakerSubscriptionWhereInput>;
  OR?: Maybe<SpeakerSubscriptionWhereInput[] | SpeakerSubscriptionWhereInput>;
  NOT?: Maybe<SpeakerSubscriptionWhereInput[] | SpeakerSubscriptionWhereInput>;
}

export interface VideoUpdateManyDataInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface VideoUpdateInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<SpeakerUpdateOneWithoutVideosInput>;
}

export interface SpeakerUpsertWithWhereUniqueNestedInput {
  where: SpeakerWhereUniqueInput;
  update: SpeakerUpdateDataInput;
  create: SpeakerCreateInput;
}

export interface SpeakerUpdateWithoutOwnerDataInput {
  profile_picture?: Maybe<String>;
  titles?: Maybe<SpeakerUpdatetitlesInput>;
  social_medias?: Maybe<SpeakerUpdatesocial_mediasInput>;
  description?: Maybe<String>;
  videos?: Maybe<VideoUpdateManyWithoutAuthorInput>;
  QAs?: Maybe<String>;
}

export interface EventUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  thumbnail_url?: Maybe<String>;
  location_name?: Maybe<String>;
  location_address?: Maybe<String>;
  location_coordinates?: Maybe<longLat>;
  price?: Maybe<Float>;
}

export interface SpeakerUpdateManyDataInput {
  profile_picture?: Maybe<String>;
  titles?: Maybe<SpeakerUpdatetitlesInput>;
  social_medias?: Maybe<SpeakerUpdatesocial_mediasInput>;
  description?: Maybe<String>;
  QAs?: Maybe<String>;
}

export interface SpeakerUpdateManyWithWhereNestedInput {
  where: SpeakerScalarWhereInput;
  data: SpeakerUpdateManyDataInput;
}

export interface SpeakerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  profile_picture?: Maybe<String>;
  profile_picture_not?: Maybe<String>;
  profile_picture_in?: Maybe<String[] | String>;
  profile_picture_not_in?: Maybe<String[] | String>;
  profile_picture_lt?: Maybe<String>;
  profile_picture_lte?: Maybe<String>;
  profile_picture_gt?: Maybe<String>;
  profile_picture_gte?: Maybe<String>;
  profile_picture_contains?: Maybe<String>;
  profile_picture_not_contains?: Maybe<String>;
  profile_picture_starts_with?: Maybe<String>;
  profile_picture_not_starts_with?: Maybe<String>;
  profile_picture_ends_with?: Maybe<String>;
  profile_picture_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  QAs?: Maybe<String>;
  QAs_not?: Maybe<String>;
  QAs_in?: Maybe<String[] | String>;
  QAs_not_in?: Maybe<String[] | String>;
  QAs_lt?: Maybe<String>;
  QAs_lte?: Maybe<String>;
  QAs_gt?: Maybe<String>;
  QAs_gte?: Maybe<String>;
  QAs_contains?: Maybe<String>;
  QAs_not_contains?: Maybe<String>;
  QAs_starts_with?: Maybe<String>;
  QAs_not_starts_with?: Maybe<String>;
  QAs_ends_with?: Maybe<String>;
  QAs_not_ends_with?: Maybe<String>;
  AND?: Maybe<SpeakerScalarWhereInput[] | SpeakerScalarWhereInput>;
  OR?: Maybe<SpeakerScalarWhereInput[] | SpeakerScalarWhereInput>;
  NOT?: Maybe<SpeakerScalarWhereInput[] | SpeakerScalarWhereInput>;
}

export interface SpeakerCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  profile_picture: String;
  titles?: Maybe<SpeakerCreatetitlesInput>;
  social_medias?: Maybe<SpeakerCreatesocial_mediasInput>;
  description: String;
  videos?: Maybe<VideoCreateManyWithoutAuthorInput>;
  QAs?: Maybe<String>;
}

export interface VideoCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  url: String;
  published?: Maybe<Boolean>;
  author?: Maybe<SpeakerCreateOneWithoutVideosInput>;
}

export interface VideoUpdateManyMutationInput {
  title?: Maybe<String>;
  url?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface SpeakerCreateManyInput {
  create?: Maybe<SpeakerCreateInput[] | SpeakerCreateInput>;
  connect?: Maybe<SpeakerWhereUniqueInput[] | SpeakerWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VideoPreviousValues {
  id: ID_Output;
  title: String;
  url: String;
  createdAt?: DateTimeOutput;
  published: Boolean;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface SpeakerConnection {
  pageInfo: PageInfo;
  edges: SpeakerEdge[];
}

export interface SpeakerConnectionPromise
  extends Promise<SpeakerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SpeakerEdge>>() => T;
  aggregate: <T = AggregateSpeakerPromise>() => T;
}

export interface SpeakerConnectionSubscription
  extends Promise<AsyncIterator<SpeakerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SpeakerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSpeakerSubscription>() => T;
}

export interface SpeakerPreviousValues {
  id: ID_Output;
  profile_picture: String;
  titles: String[];
  social_medias: String[];
  description: String;
  QAs?: String;
}

export interface SpeakerPreviousValuesPromise
  extends Promise<SpeakerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  profile_picture: () => Promise<String>;
  titles: () => Promise<String[]>;
  social_medias: () => Promise<String[]>;
  description: () => Promise<String>;
  QAs: () => Promise<String>;
}

export interface SpeakerPreviousValuesSubscription
  extends Promise<AsyncIterator<SpeakerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  profile_picture: () => Promise<AsyncIterator<String>>;
  titles: () => Promise<AsyncIterator<String[]>>;
  social_medias: () => Promise<AsyncIterator<String[]>>;
  description: () => Promise<AsyncIterator<String>>;
  QAs: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email?: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Speaker {
  id: ID_Output;
  profile_picture: String;
  titles: String[];
  social_medias: String[];
  description: String;
  QAs?: String;
}

export interface SpeakerPromise extends Promise<Speaker>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  profile_picture: () => Promise<String>;
  titles: () => Promise<String[]>;
  social_medias: () => Promise<String[]>;
  description: () => Promise<String>;
  videos: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  QAs: () => Promise<String>;
}

export interface SpeakerSubscription
  extends Promise<AsyncIterator<Speaker>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  profile_picture: () => Promise<AsyncIterator<String>>;
  titles: () => Promise<AsyncIterator<String[]>>;
  social_medias: () => Promise<AsyncIterator<String[]>>;
  description: () => Promise<AsyncIterator<String>>;
  videos: <T = Promise<AsyncIterator<VideoSubscription>>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  QAs: () => Promise<AsyncIterator<String>>;
}

export interface SpeakerNullablePromise
  extends Promise<Speaker | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  profile_picture: () => Promise<String>;
  titles: () => Promise<String[]>;
  social_medias: () => Promise<String[]>;
  description: () => Promise<String>;
  videos: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  QAs: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Video {
  id: ID_Output;
  title: String;
  url: String;
  createdAt?: DateTimeOutput;
  published: Boolean;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  author: <T = SpeakerPromise>() => T;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = SpeakerSubscription>() => T;
}

export interface VideoNullablePromise
  extends Promise<Video | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  author: <T = SpeakerPromise>() => T;
}

export interface AggregateSpeaker {
  count: Int;
}

export interface AggregateSpeakerPromise
  extends Promise<AggregateSpeaker>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpeakerSubscription
  extends Promise<AsyncIterator<AggregateSpeaker>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event {
  id: ID_Output;
  title: String;
  description: String;
  thumbnail_url: String;
  location_name: String;
  location_address: String;
  location_coordinates: longLat;
  price?: Float;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  thumbnail_url: () => Promise<String>;
  location_name: () => Promise<String>;
  location_address: () => Promise<String>;
  location_coordinates: () => Promise<longLat>;
  price: () => Promise<Float>;
  speakers: <T = FragmentableArray<Speaker>>(args?: {
    where?: SpeakerWhereInput;
    orderBy?: SpeakerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  thumbnail_url: () => Promise<AsyncIterator<String>>;
  location_name: () => Promise<AsyncIterator<String>>;
  location_address: () => Promise<AsyncIterator<String>>;
  location_coordinates: () => Promise<AsyncIterator<longLat>>;
  price: () => Promise<AsyncIterator<Float>>;
  speakers: <T = Promise<AsyncIterator<SpeakerSubscription>>>(args?: {
    where?: SpeakerWhereInput;
    orderBy?: SpeakerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  thumbnail_url: () => Promise<String>;
  location_name: () => Promise<String>;
  location_address: () => Promise<String>;
  location_coordinates: () => Promise<longLat>;
  price: () => Promise<Float>;
  speakers: <T = FragmentableArray<Speaker>>(args?: {
    where?: SpeakerWhereInput;
    orderBy?: SpeakerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface SpeakerSubscriptionPayload {
  mutation: MutationType;
  node: Speaker;
  updatedFields: String[];
  previousValues: SpeakerPreviousValues;
}

export interface SpeakerSubscriptionPayloadPromise
  extends Promise<SpeakerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SpeakerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpeakerPreviousValuesPromise>() => T;
}

export interface SpeakerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpeakerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpeakerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpeakerPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email?: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  isSpeaker: <T = SpeakerPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  isSpeaker: <T = SpeakerSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  isSpeaker: <T = SpeakerPromise>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  thumbnail_url: String;
  location_name: String;
  location_address: String;
  location_coordinates: longLat;
  price?: Float;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  thumbnail_url: () => Promise<String>;
  location_name: () => Promise<String>;
  location_address: () => Promise<String>;
  location_coordinates: () => Promise<longLat>;
  price: () => Promise<Float>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  thumbnail_url: () => Promise<AsyncIterator<String>>;
  location_name: () => Promise<AsyncIterator<String>>;
  location_address: () => Promise<AsyncIterator<String>>;
  location_coordinates: () => Promise<AsyncIterator<longLat>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpeakerEdge {
  node: Speaker;
  cursor: String;
}

export interface SpeakerEdgePromise extends Promise<SpeakerEdge>, Fragmentable {
  node: <T = SpeakerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SpeakerEdgeSubscription
  extends Promise<AsyncIterator<SpeakerEdge>>,
    Fragmentable {
  node: <T = SpeakerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  },
  {
    name: "Speaker",
    embedded: false
  },
  {
    name: "longLat",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
